/* === BLOCO 1: Bot√µes "Em Breve" nos projetos e reposit√≥rios === */
// Seleciona todos os bot√µes com a classe 'em-breve'
document.querySelectorAll('.em-breve').forEach((botao) => {
  // Adiciona um evento de clique a cada bot√£o
  botao.addEventListener('click', (e) => {
    e.preventDefault(); // Impede que o link redirecione
    alert('üîí Em breve: este conte√∫do ainda n√£o est√° dispon√≠vel.'); // Mostra o alerta
  });
});

/* === BLOCO 2: Anima√ß√£o "reveal" ao rolar a p√°gina === */
// Seleciona todos os elementos com a classe 'reveal'
const reveals = document.querySelectorAll('.reveal');

// Cria um observador para detectar quando um elemento entra na tela
const observer = new IntersectionObserver(
  (entries) => {
    entries.forEach((entry) => {
      // Quando o elemento estiver vis√≠vel na tela
      if (entry.isIntersecting) {
        entry.target.classList.add('active'); // Ativa a anima√ß√£o CSS
        observer.unobserve(entry.target); // Para de observar para melhorar performance
      }
    });
  },
  { threshold: 0.1 } // A anima√ß√£o ativa quando 10% do elemento estiver vis√≠vel
);

// Aplica o observador a cada elemento com a classe 'reveal'
reveals.forEach((reveal) => observer.observe(reveal));

/* === BLOCO 3: Bot√£o de "Voltar ao Topo" === */
const backToTopButton = document.querySelector('.back-to-top');

// Mostra ou oculta o bot√£o de voltar ao topo dependendo do scroll
window.addEventListener('scroll', () => {
  if (window.scrollY > 300) {
    backToTopButton.classList.add('show'); // Mostra bot√£o
  } else {
    backToTopButton.classList.remove('show'); // Esconde bot√£o
  }
});

// Comportamento suave ao clicar no bot√£o de voltar ao topo
backToTopButton.addEventListener('click', () => {
  window.scrollTo({ top: 0, behavior: 'smooth' });
});

/* === BLOCO 4: Menu mobile (toggle do menu de navega√ß√£o) === */
const navToggle = document.querySelector('.nav-toggle'); // Bot√£o de menu hamburguer
const navLinks = document.querySelector('.nav-links');   // Lista de links

// Alterna a visibilidade do menu ao clicar no bot√£o
navToggle.addEventListener('click', () => {
  navLinks.classList.toggle('show');
});

/* === BLOCO 5: Efeito Tilt (inclina√ß√£o suave da imagem) === */
document.addEventListener('mousemove', (e) => {
  const tilt = document.querySelector('.tilt'); // Seleciona o elemento que ser√° inclinado
  const { clientX: x, clientY: y } = e; // Captura a posi√ß√£o do mouse
  const centerX = window.innerWidth / 2;  // Centro horizontal da tela
  const centerY = window.innerHeight / 2; // Centro vertical da tela
  const rotateX = (y - centerY) / 100;    // Calcula inclina√ß√£o no eixo X
  const rotateY = (x - centerX) / 100;    // Calcula inclina√ß√£o no eixo Y

  // Aplica a transforma√ß√£o de inclina√ß√£o
  tilt.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
});

/* === BLOCO 6: Garante que a anima√ß√£o reveal aconte√ßa ao carregar e ao rolar === */
window.addEventListener('scroll', revealOnScroll); // Ao rolar a p√°gina
window.addEventListener('load', revealOnScroll);   // Ao carregar a p√°gina
